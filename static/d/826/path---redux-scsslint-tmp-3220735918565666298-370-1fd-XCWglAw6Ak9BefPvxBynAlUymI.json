{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>This module contains helper functions for building redux-actions Actions. The preferred way to do this is to use the</p>\n<ul>\n<li>following functions:</li>\n<li>*</li>\n<li>\n<ul>\n<li>createActionNoArgs</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>createActionWithPayload</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>createActionWithMeta</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>createActionWithPayloadAndMeta</li>\n</ul>\n</li>\n<li>*</li>\n<li>These functions restrict the signatures of the Actions to have zero to many meta arguments and zero or one payload</li>\n<li>arguments. Meta arguments are used to identify the data that is being manipulated in the redux store, and the</li>\n<li>payload argument is incoming data that is to be reduced.</li>\n<li>*</li>\n<li>Example Usage</li>\n<li>\n<pre><code></code></pre>\n</li>\n<li>import {</li>\n<li>createActionNoArgs,</li>\n<li>createActionWithMeta,</li>\n<li>createActionWithPayload,</li>\n<li>createActionWithPayloadAndMeta,</li>\n<li>} from \"common-ui\";</li>\n<li>*</li>\n<li>*</li>\n<li>export default {</li>\n<li>// No meta or payload</li>\n<li>requestList: createActionNoArgs(\"category.list@request\"),</li>\n<li>*</li>\n<li>// No meta, payload contains an array of categories received from the endpoint</li>\n<li>receiveList: createActionWithPayload(\"category.list@receive\"),</li>\n<li>*</li>\n<li>// Meta identifies the category to store by alias</li>\n<li>requestStore: createActionWithMeta(\"category.store@request\", ['alias']),</li>\n<li>*</li>\n<li>// Meta identifies the category to store by alias, payload contains the just-stored category details</li>\n<li>receiveStore: createActionWithPayloadAndMeta(\"category.store@receive\", ['alias']),</li>\n<li>}</li>\n<li>\n<pre><code></code></pre>\n</li>\n<li>*</li>\n<li>Actions are functions which create objects which are dispatched via redux and reduced into the store by reducers.</li>\n<li>*</li>\n<li>Example Usage</li>\n<li>\n<pre><code></code></pre>\n</li>\n<li>// (Actions) Create an action</li>\n<li>action = createActionWithPayloadAndMeta(\"database.tables.columns@receive\", ['alias', 'schema', 'table']);</li>\n<li>*</li>\n<li>// (Component) Dispatch an action</li>\n<li>dispatch(action({ (payload) }, 'myAlias', 'mySchema', 'myTable');</li>\n<li>*</li>\n<li>// (Reducers) Handle the dispatched action via a Reducer to reduce the new payload into the store</li>\n<li>[action]: (state, {error, payload, meta: {alias, schema, table}}) =></li>\n<li>\n<pre><code></code></pre>\n</li>\n</ul>","frontmatter":{"title":"redux-actions"}}}]}},"pageContext":{}}