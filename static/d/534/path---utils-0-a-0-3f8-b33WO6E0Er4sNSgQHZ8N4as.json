{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>Display a deprecation warning with the provided message and a stack trace\n(Chrome and Firefox only) when the assigned method is called.</p>\n<p>Calls to this function are removed from production builds, so they can be\nfreely added for documentation and debugging purposes without worries of\nincurring any performance penalty.</p>\n<h4>Example</h4>\n<pre><code class=\"language-javascript\">import { deprecate } from 'bandit-pouch';\n\nconst get = deprecate('Deprecation warning', (obj, path) => obj[path])\nconst result = get({ foo: 1 }, 'foo');\n// prints the Deprecation warning message and a stack trace\nconsole.log(result)\n// prints out 1\n</code></pre>","frontmatter":{"id":"utils-deprecate","title":"Deprecate"}}},{"node":{"html":"<p>Verify that a certain expectation is met, or throw a exception otherwise.</p>\n<p>This is useful for communicating assumptions in the code to other human\nreaders as well as catching bugs that accidentally violates these\nexpectations.</p>\n<p>Assertions are removed from production builds, so they can be freely added\nfor documentation and debugging purposes without worries of incurring any\nperformance penalty. However, because of that, they should not be used for\nchecks that could reasonably fail during normal usage. Furthermore, care\nshould be taken to avoid accidentally relying on side-effects produced from\nevaluating the condition itself, since the code will not run in production.</p>\n<h4>Example</h4>\n<pre><code class=\"language-javascript\">import { assert } from 'bandit-pouch';\n\nexport default function get(obj, path) {\n  assert(typeof obj === 'object', 'Object must be a Object');\n  assert(typeof path === 'string', 'Path must be a string');\n  return obj[path];\n}\n</code></pre>","frontmatter":{"id":"utils-assert","title":"Assert"}}},{"node":{"html":"<p>There are two helper methods that can be used to render Bootstrap components in your app.</p>\n<ul>\n<li><a href=\"https://react-bootstrap.github.io/components/popovers/\">Popover</a></li>\n<li><a href=\"https://react-bootstrap.github.io/components/tooltips/\">Tooltip</a></li>\n</ul>\n<h4>Example</h4>\n<pre><code class=\"language-javascript\">import { tooltip, popover } from 'bandit-pouch';\nimport { Button, OverlayTrigger } from 'react-bootstrap';\n\nexport default () => (\n  &#x3C;div>\n    &#x3C;OverlayTrigger placement=\"top\" overlay={tooltip('Tooltip text')}>\n      &#x3C;Button>Show tooltip!&#x3C;/Button>\n    &#x3C;/OverlayTrigger>\n    \n    &#x3C;OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover('Popover title', 'Popover text')}>\n      &#x3C;Button>Show Popover!&#x3C;/Button>\n    &#x3C;/OverlayTrigger>\n  &#x3C;/div>\n);\n</code></pre>","frontmatter":{"id":"utils-react","title":"React"}}},{"node":{"html":"<p>This library comes with a list of common Form field validators.</p>\n<h4>required</h4>\n<pre><code class=\"language-javascript\">import React  from 'react';\nimport { Validators } from 'bandit-pouch';\nimport { Form, Field, reduxForm } from 'redux-form';\n\n/**\n* The required validator validates that the value is defined.\n* This validator will probably the most used one, it corresponds to HTML5's required attribute.\n*/\nconst required = Validators.required('Field is required');\n\n/**\n* The format validator will validate a value against a regular expression of your chosing.\n* You can customize the error message to something more intuitive.\n*/\nconst regex = Validators.regex(/\\d{5}(-\\d{4})?/, 'Invalid ZIP code');\nconst required = Validators.required('Custom error message');\nconst required = Validators.required('Custom error message');\n\nexport default () => (\n  &#x3C;Field\n    name=\"field\"\n    component={TextField}\n    validate={[\n      Validators.required(),\n      Validators.min(6)\n    ]}\n  />\n)\n</code></pre>","frontmatter":{"id":"utils-validators","title":"Validators"}}}]}},"pageContext":{}}